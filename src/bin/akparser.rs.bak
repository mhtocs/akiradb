use akiradb::apache;
use akiradb::ingest::tokenizer;
use akiradb::util::config;
use akiradb::util::file;
use rayon::prelude::*;
use roaring::RoaringBitmap;
use std::collections::HashMap;
use std::fs::File;
use std::fs::OpenOptions;
use std::io::BufRead;
use std::io::BufWriter;
use std::io::Write;

fn print_type<T>(_: &T) {
    println!("{}", std::any::type_name::<T>())
}

fn main() {
    let cfg = config::Opt::from_args();
    cfg.files.iter().for_each(|filename| {
        if cfg.verbose {
            println!("parsing file {}", filename.display())
        }

        // Open the file in read-only mode (ignoring errors).
        let mut reader = file::reader(&filename, &cfg);
        let mut buf = String::new();
        let mut map = HashMap::new();
        let mut i = 0;
        let mut sucess = 0;
        while reader.read_line(&mut buf).unwrap_or(0) > 0 {
            match apache::parse(&buf) {
                Some(log) => {
                    //tokenize only the request
                    //                println!("{:?}", &log);
                    let request = &log.referer.unwrap();
                    let tokens = tokenizer::tokenize(&request);

                    //                   println!("{:?}", &tokens);
                    //                    print_type(&tokens);

                    for token in tokens {
                        let bitmap = map.entry(token.to_owned()).or_insert(RoaringBitmap::new());
                        (*bitmap).insert(i);
                        sucess += 1;
                    }
                }
                None => {
                    println!("FAILURE:: {}", &buf);
                    ()
                }
            };
            i += 1;
            buf.clear();
        }
        //println!("BITMAP IS:: {:#?}", map);
        //println!("BITMAP SIZE:: {}", map.keys().len());
        //println!("i is :: {}, sucess is:: {}", i, sucess);
        i = 0;
        let mut bigg = vec![];
        let mut file = OpenOptions::new()
            .append(true)
            .open(format!("terms/{}.bin", i))
            .unwrap();

        let mut total_size = 0usize;
        /*
        for (k, v) in map.iter_mut() {
            let k = k.as_bytes();
            let bitmap_size = v.serialized_size();
            total_size += bitmap_size;
            let mut bytes = vec![];
            v.serialize_into(&mut bytes).unwrap();
            bigg.append(&mut bytes);
            i += 1;
        }
        */
        println!("size:: {}", total_size);
        file.write(&bigg).unwrap();
    });
}
